import sys
import time

class Graph():
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)] for row in range(vertices)]

    def printMST(self, parent):
        print("Edge \tWeight")
        for i in range(1, self.V):
            print(parent[i], "-", i, "\t", self.graph[i][parent[i]])

    def minKey(self, key, mstSet):
        min = sys.maxsize
        for v in range(self.V):
            if key[v] < min and mstSet[v] == False:
                min = key[v]
                min_index = v
        return min_index

    def primMST(self):
        key = [sys.maxsize] * self.V
        parent = [None] * self.V 
        key[0] = 0
        mstSet = [False] * self.V
        parent[0] = -1

        start_time = time.time()

        for cout in range(self.V):
            u = self.minKey(key, mstSet)
            mstSet[u] = True
            for v in range(self.V):
                if self.graph[u][v] > 0 and mstSet[v] == False and key[v] > self.graph[u][v]:
                    key[v] = self.graph[u][v]
                    parent[v] = u

        end_time = time.time()
        time_taken = end_time - start_time

        self.printMST(parent)

        print("Start Time:", start_time)
        print("End Time:", end_time)
        print("Time Taken:", time_taken)

# Creating an instance of the Graph class
g = Graph(5)
g.graph = [[0, 5, 2, 0, 0],
           [0, 0, 4, 0, 1],
           [0, 4, 0, 6, 0],
           [0, 0, 0, 0, 3],
           [0, 1, 0, 3, 0]]

g.primMST()

//OUTPUT
Edge 	Weight
2 - 1 	 4
0 - 2 	 0
4 - 3 	 3
1 - 4 	 1
Start Time: 1703010266.2647128
End Time: 1703010266.264731
Time Taken: 1.811981201171875e-05
