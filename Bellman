import time

class Graph:
    def __init__(self, vertices):
        self.V = vertices 
        self.graph = []

    def addEdge(self, u, v, w):
        self.graph.append([u, v, w])

    def printArr(self, dist):
        print("Vertex Distance from Source")
        for i in range(self.V):
            print("{0}\t\t{1}".format(i, dist[i]))

    def BellmanFord(self, src):
        start_time = time.time()

        dist = [float("Inf")] * self.V
        dist[src] = 0

        for _ in range(self.V - 1):
            for u, v, w in self.graph:
                if dist[u] != float("Inf") and dist[u] + w < dist[v]:
                    dist[v] = dist[u] + w

        for u, v, w in self.graph:
            if dist[u] != float("Inf") and dist[u] + w < dist[v]:
                end_time = time.time()
                time_taken = end_time - start_time
                print("Graph contains negative weight cycle")
                print("Start Time:", start_time)
                print("End Time:", end_time)
                print("Time Taken:", time_taken)
                return

        end_time = time.time()
        time_taken = end_time - start_time

        self.printArr(dist)
        print("Start Time:", start_time)
        print("End Time:", end_time)
        print("Time Taken:", time_taken)

g = Graph(5)
g.addEdge(0, 1, 6)
g.addEdge(0, 2, 5)
g.addEdge(1, 3, -1)
g.addEdge(2, 1, -2)
g.addEdge(2, 3, 4)
g.addEdge(2, 4, 3)
g.addEdge(3, 4, 3)

g.BellmanFord(0)
